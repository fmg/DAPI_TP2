/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Indexer.DocIndexer;
import Indexer.Movie;
import Searcher.QueryBuilder;
import Searcher.Searcher;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.apache.lucene.document.Document;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.search.BooleanClause;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;

/**
 *
 * @author Desktop
 */
public class GUIForm extends javax.swing.JFrame {
    
    final static int RAW_QUERY = 1;
    final static int BOOLEAN_QUERY = 2;
    
    Searcher searcher;
    
    String xmlFilePath;
    BooleanQuery bquery;
    Query rawQuery;
    int selectedQuery = BOOLEAN_QUERY;
    
            
    

    /**
     * Creates new form GUIForm
     */
    public GUIForm() {
        initComponents();
        
        String[] searchFields = Movie.getShearchableFields();
        
        for(Object c: searchFields){
            searchFieldsComboBox.addItem(c);
        }
        
        searcher = new Searcher();
        bquery = new BooleanQuery();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        rawQueryRadioButton = new javax.swing.JRadioButton();
        booleanQueryRadioButton = new javax.swing.JRadioButton();
        searchFieldsComboBox = new javax.swing.JComboBox();
        wordsTextField = new javax.swing.JTextField();
        queryOutputTextField = new javax.swing.JTextField();
        wildcardQueryRadioButton = new javax.swing.JRadioButton();
        filePathLabel = new javax.swing.JTextField();
        FileChooserButton = new javax.swing.JButton();
        resetQueryButton = new javax.swing.JButton();
        IndexButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        addTermButton = new javax.swing.JButton();
        searchQueryButton = new javax.swing.JButton();
        queryClauseComboBox = new javax.swing.JComboBox();
        rangeQueryRadioButton = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(905, 413));
        setResizable(false);

        resultsTextArea.setEditable(false);
        resultsTextArea.setColumns(20);
        resultsTextArea.setRows(5);
        jScrollPane1.setViewportView(resultsTextArea);

        buttonGroup1.add(rawQueryRadioButton);
        rawQueryRadioButton.setText("Raw Query");
        rawQueryRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rawQueryRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(booleanQueryRadioButton);
        booleanQueryRadioButton.setSelected(true);
        booleanQueryRadioButton.setText("Boolean Query");

        queryOutputTextField.setEditable(false);
        queryOutputTextField.setFocusable(false);

        buttonGroup1.add(wildcardQueryRadioButton);
        wildcardQueryRadioButton.setText("Wildcard Query");

        filePathLabel.setEditable(false);
        filePathLabel.setFocusable(false);

        FileChooserButton.setText("Choose XML File");
        FileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileChooserButtonActionPerformed(evt);
            }
        });

        resetQueryButton.setText("Reset Query");
        resetQueryButton.setEnabled(false);
        resetQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetQueryButtonActionPerformed(evt);
            }
        });

        IndexButton.setText("Index");
        IndexButton.setEnabled(false);
        IndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndexButtonActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Indexing");
        jLabel1.setEnabled(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Searching");
        jLabel2.setEnabled(false);

        addTermButton.setText("Add Term");
        addTermButton.setEnabled(false);
        addTermButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTermButtonActionPerformed(evt);
            }
        });

        searchQueryButton.setText("Search");
        searchQueryButton.setEnabled(false);
        searchQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchQueryButtonActionPerformed(evt);
            }
        });

        queryClauseComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MUST", "SHOULD", "MUST_NOT" }));

        buttonGroup1.add(rangeQueryRadioButton);
        rangeQueryRadioButton.setText("Numeric Range Query");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Query:");
        jLabel3.setFocusable(false);
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(FileChooserButton)
                        .addGap(18, 18, 18)
                        .addComponent(IndexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rawQueryRadioButton)
                            .addComponent(wildcardQueryRadioButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(booleanQueryRadioButton)
                                .addGap(18, 18, 18)
                                .addComponent(wordsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(searchFieldsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(resetQueryButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(searchQueryButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(queryClauseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addTermButton))
                            .addComponent(rangeQueryRadioButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(queryOutputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FileChooserButton)
                    .addComponent(IndexButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(23, 23, 23)
                .addComponent(rawQueryRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(booleanQueryRadioButton)
                    .addComponent(wordsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchFieldsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addTermButton)
                    .addComponent(queryClauseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wildcardQueryRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rangeQueryRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetQueryButton)
                    .addComponent(searchQueryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(queryOutputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileChooserButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        chooser.setAcceptAllFileFilterUsed(false);

        FileFilter filter = new FileFilter() {

            @Override
            public boolean accept(File pathname) {
                return pathname.getName().toLowerCase().endsWith(".xml") || pathname.isDirectory();
            }

            @Override
            public String getDescription() {
                return "XML Files";
            }
        };

        chooser.setFileFilter(filter);

        int r = chooser.showOpenDialog(this);
        if (r == JFileChooser.APPROVE_OPTION) {
            xmlFilePath = chooser.getSelectedFile().getPath();
            filePathLabel.setText(xmlFilePath);
            IndexButton.setEnabled(true);
        }
    }//GEN-LAST:event_FileChooserButtonActionPerformed

    private void IndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndexButtonActionPerformed
        
        int ret = DocIndexer.indexMovieFile(xmlFilePath);
        
        if(ret == 0) {
            JOptionPane.showMessageDialog(this,"Index created", "Index", JOptionPane.INFORMATION_MESSAGE);
            
            
            ret = searcher.initSearch();
            
            if(ret == -1){
                JOptionPane.showMessageDialog(this,"Search not ready.\nPlease try again.", "Search", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            addTermButton.setEnabled(true);
            resetQueryButton.setEnabled(true);
            IndexButton.setEnabled(false);

            
        }
        else if(ret == -1) {
            JOptionPane.showMessageDialog(this,"Error reading XML file", "Index", JOptionPane.ERROR_MESSAGE);
        }
        else {
            JOptionPane.showMessageDialog(this,"Error creating Index", "Index", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_IndexButtonActionPerformed

    private void addTermButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTermButtonActionPerformed
        
        BooleanClause.Occur clause = BooleanClause.Occur.valueOf(queryClauseComboBox.getSelectedItem().toString());
        String sfield = searchFieldsComboBox.getSelectedItem().toString();
        String words = wordsTextField.getText();
        
        if(words.length() == 0){
            JOptionPane.showMessageDialog(this,"No input", "Invalid query", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String[] splitedWords = words.split(" ");
        
        if(selectedQuery == RAW_QUERY){
            try {
                rawQuery = QueryBuilder.buildRawQuery(searcher.getAnalyzer(), words, sfield);
                resultsTextArea.setText("");
                queryOutputTextField.setText(rawQuery.toString());
                searchQueryButton.setEnabled(true);

            } catch (ParseException ex) {
                rawQuery = null;
                JOptionPane.showMessageDialog(this,"Invalid raw query. See results area for explanation", "Raw Query", JOptionPane.ERROR_MESSAGE);
                resultsTextArea.setText(ex.getMessage());

            }
        }else{
            
            if(booleanQueryRadioButton.isSelected()){
                
                
                
                QueryBuilder.addTermToBooleanQuery(bquery, sfield, clause, splitedWords);
                resultsTextArea.setText("");
                queryOutputTextField.setText(bquery.toString());
                searchQueryButton.setEnabled(true);
                
            }else if(wildcardQueryRadioButton.isSelected()){
                
                QueryBuilder.addWildCardTermToBooleanQuery(bquery, sfield, clause, words.split(" ")[0]);
                resultsTextArea.setText("");
                queryOutputTextField.setText(bquery.toString());
                searchQueryButton.setEnabled(true);
                
            }else if(rangeQueryRadioButton.isSelected()){
                
                String[] splitedNumbers = splitedWords[0].split("-");
                
                if(splitedNumbers.length != 2){
                    JOptionPane.showMessageDialog(this,"Invalid numeric query. Must contain \"number-number\" only", "Numeric Range Query", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                int begin = Integer.parseInt(splitedNumbers[0]);
                int end = Integer.parseInt(splitedNumbers[1]);
                
                QueryBuilder.addRangeTermToBooleanQuery(bquery, sfield, clause, begin, end);
                
                resultsTextArea.setText("");
                queryOutputTextField.setText(bquery.toString());
                searchQueryButton.setEnabled(true);
                
            }     
        }
        
        
        
    }//GEN-LAST:event_addTermButtonActionPerformed

    private void resetQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetQueryButtonActionPerformed
        
        selectedQuery = BOOLEAN_QUERY;
        
        rawQuery = null;
        bquery = new BooleanQuery();        
        
        wordsTextField.setText("");
        queryOutputTextField.setText("");
        resultsTextArea.setText("");
        
        
        searchQueryButton.setEnabled(false);

    }//GEN-LAST:event_resetQueryButtonActionPerformed

    private void rawQueryRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rawQueryRadioButtonActionPerformed
        selectedQuery = RAW_QUERY;
    }//GEN-LAST:event_rawQueryRadioButtonActionPerformed

    private void searchQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchQueryButtonActionPerformed
        
        
        ScoreDoc[] hits = null;
        
        if(selectedQuery == RAW_QUERY){
            hits = searcher.performQuery(rawQuery);
        }else{
            hits = searcher.performQuery(bquery);
        }
             
        
        try{
            
            System.out.println("\nQUERY RESULTS -> "+  hits.length);

            
            for(int i=0;i<hits.length;++i) {
                int docId = hits[i].doc;
                Document doc = searcher.getIndexSearcher().doc(docId);
                resultsTextArea.append("\n"+ (i + 1) + ".    Score: " + hits[i].score  + 
                        "\tTitle: "+ doc.get(Movie.MOVIE_TITLE) + 
                        "\t\tYear: " + doc.get(Movie.MOVIE_YEAR) + 
                        "\tStudio: " + doc.get(Movie.STUDIO_NAME)+
                        "\tLink: http://www.rottentomatoes.com/m/" + doc.get(Movie.MOVIE_ID) + "/"
                        );
                
            }

        }catch(IOException ex){
            resultsTextArea.setText("Query Error: "+ ex.getMessage());
        }
        
    }//GEN-LAST:event_searchQueryButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FileChooserButton;
    private javax.swing.JButton IndexButton;
    private javax.swing.JButton addTermButton;
    private javax.swing.JRadioButton booleanQueryRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField filePathLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox queryClauseComboBox;
    private javax.swing.JTextField queryOutputTextField;
    private javax.swing.JRadioButton rangeQueryRadioButton;
    private javax.swing.JRadioButton rawQueryRadioButton;
    private javax.swing.JButton resetQueryButton;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JComboBox searchFieldsComboBox;
    private javax.swing.JButton searchQueryButton;
    private javax.swing.JRadioButton wildcardQueryRadioButton;
    private javax.swing.JTextField wordsTextField;
    // End of variables declaration//GEN-END:variables
}
